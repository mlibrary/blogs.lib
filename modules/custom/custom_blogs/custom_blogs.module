<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\views\ViewExecutable;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Views;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Site\Settings;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\Entity\UserInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_blog_post_form', 'node_blog_post_edit_form'])) {
    if ($form_state->getFormObject()->getEntity()->get('moderation_state')->value == 'published') {
      $form['moderation_state']['#type'] = 'hidden';
      $form['#attached']['library'][] = 'custom_blogs/stupid-scheduler-settings-wrapper';
    }
    // Not sure why this has happened both ways.
    if (isset($form['publish_state']['widget'][0])) {
      $form['publish_state']['widget'][0]['#default_value'][] = 'published';
      unset($form['publish_state']['widget'][0]['#options']['_none']);
    }
    else {
      $form['publish_state']['widget']['#default_value'][] = 'published';
      unset($form['publish_state']['widget']['#options']['_none']);
    }
    $form['publish_state']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!\Drupal::currentUser()->hasPermission('administer_user')) {
    $form['account']['name']['#type'] = 'hidden';
    $form['field_user_last']['#type'] = 'hidden';
    $form['field_user_first']['#type'] = 'hidden';
    $form['field_user_display']['#type'] = 'hidden';
    $form['field_user_title']['#type'] = 'hidden';
  }
  if (empty($form['account']['name']['#default_value'])) {
    $form['account']['name']['#value'] = user_password();
  }
  array_unshift($form['#validate'], '_custom_blogs_form_user_register_validate');
}

/**
 * custom_validate for user_form_alter().
 */
function _custom_blogs_form_user_register_validate(&$form, FormStateInterface $form_state) {
  $email = $form_state->getValue('mail');
  $uname = NULL;
  if ($email) {
    $uname = explode('@', $email);
    if ($uname[1] == 'umich.edu') {
      $uname = $uname[0];
    }
    else {
      $uname = $email;
    }
  }
  if ($uname) {
    $form_state->setValue('name', $uname);
    $form_state->setValue('edit_name', $uname);
  }
  else {
    $form_state->setErrorByName('blogs_username_error', t('Cannot create user ' . $uname));
  }
}

/**
 * get data from mcommunity().
 */
function _get_mcommunity_user($name) {
  $user_data = [];
  if ($mcomm = Settings::get('mcommunity')) {
    $ldap_config = parse_ini_file($mcomm, TRUE);
    $ldap_resource = ldap_connect($ldap_config['connect']['uri']);
    ldap_bind($ldap_resource, $ldap_config['bind']['dn'], $ldap_config['bind']['pw']);
    $ldap_result = ldap_search(
      $ldap_resource,
      "ou=People,dc=umich,dc=edu",
      "(uid=".$name.")",
      ['entityid','displayName','title','mail','givenname','sn','umichtitle',]
    );
    $ldap_entries = ldap_get_entries($ldap_resource, $ldap_result);
    if ($ldap_entries['count'] != 0) {
      $raw_data = array_filter($ldap_entries[0], function($k) { return !is_numeric($k); }, ARRAY_FILTER_USE_KEY);
      foreach ($raw_data as $key => $data) {
        if (isset($data[0])) {
          $user_data[$key] = $data[0];
        }
      }
    }
  }

  return $user_data;
}

/**
* Implements hook_ENTITY_TYPE_presave().
*/
function custom_blogs_paragraph_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'get_in_touch') {
    _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
  }
}

/**
* Implements hook_ENTITY_TYPE_insert().
*/
function custom_blogs_paragraph_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'get_in_touch') {
    _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
  }
}

/**
* Implements hook_ENTITY_TYPE_update().
*/
function custom_blogs_paragraph_update(EntityInterface $entity) {
  if ($entity->bundle() == 'get_in_touch') {
    _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
  }
}

/**
* Implements hook_ENTITY_TYPE_presave().
*/
function custom_blogs_user_presave($user) {
  $user_name = $user->getAccountName();
  if (strpos($user_name, '@') === FALSE) {
    $user_data = _get_mcommunity_user($user_name);
    if (!empty($user_data['sn'])) {
      $user->get('field_user_last')->setValue([['value' => $user_data['sn']]]);
    }
    if (!empty($user_data['givenname'])) {
      $user->get('field_user_first')->setValue([['value' => $user_data['givenname']]]);
    }
    if (!empty(trim($user_data['displayname']))) {
      $user->get('field_user_display')->setValue([['value' => $user_data['displayname']]]);
    }
    else if (!empty($user_data['sn']) && !empty($user_data['givenname'])) {
      $user->get('field_user_display')->setValue([['value' => $user_data['givenname'].' '.$user_data['sn']]]);
    }
    if (!empty($user_data['umichtitle'])) {
      $user->get('field_user_title')->setValue([['value' => $user_data['umichtitle']]]);
    }
  }
}

/**
* Implements hook_ENTITY_TYPE_view_alter().
*/
function custom_blogs_paragraph_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'get_in_touch') {
    $is_empty = _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
    if (!$is_empty) {
      $name = trim($entity->get('field_name')->value);
      $email = trim($entity->get('field_email')->value);
      if (empty($name)) {
        unset($build['field_name']);
      }
      else if (empty($email)) {
        unset($build['field_email']);
      }
    }
  }
}

/**
 * custom function to remove empty paragraphs().
 */
// see if https://www.drupal.org/project/paragraphs/issues/2877695 is ever solved.
function _custom_blogs_make_sure_we_delete_empty_paragraphs(EntityInterface $entity) {
  $name = trim($entity->get('field_name')->value);
  $email = trim($entity->get('field_email')->value);
  if (empty($name) && empty($email)) {
    $entity->delete();
    return TRUE;
  }
  return FALSE;
}

/**
* Implements hook_ENTITY_TYPE_view_alter().
*/
function custom_blogs_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'blog_post') {
    $tags = $entity->get('field_blog_tag');
    if ($tags && isset($build['field_blog_tag'][0]['#url']) && $entity->get('og_audience')) {
      foreach ($tags as $delta => $tag) {
        $build['field_blog_tag'][$delta]['#url']->setOption('query', [
          'blog' => $entity->get('og_audience')->target_id,
        ]);
      }
    }
  }
  if ($entity->bundle() == 'blog' && $display->id() == 'node.blog.subscribe') {
    $build['#post_render'][] = function ($html, array $elements) {
      return str_replace(' group', ' '.$elements['#node']->label(), $html);
    };
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function custom_blogs_field_widget_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Skip "Confirm deletion / Restore actions" behavior for all paragraphs.
  // see https://www.drupal.org/node/2831409
  $element['top']['links']['remove_button']['#paragraphs_mode'] = 'removed';
}

/**
 * Implements hook_page_attachments().
 */
function custom_blogs_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'custom_blogs/login-return-page-link';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function custom_blogs_preprocess_views_view_field(&$vars) {
  if(isset($vars['view']) && ($vars['view']->id() == 'blogs_rss') && (in_array($vars['view']->current_display, ['feed_2', 'feed_1']))) {
    if (isset($vars['view']->field) && (count($vars['view']->field) > 0)) {
      if ($vars['field']->field == 'field_author_s_') {
        $authors = explode(',', $vars['output']->__toString());
        $auth_user = user_load_by_name(trim($authors[0]));
        $string = 'Anonymous';
        if (!is_bool($auth_user)) {
          if (!empty($auth_user->get('field_user_display')->value)) {
            $string = $auth_user->get('field_user_display')->value;
          }
        }
        if (isset($authors[1])) {
          unset($authors[0]);
          foreach ($authors as $author) {
            $auth_user = user_load_by_name(trim($author));
            if (!is_bool($auth_user)) {
              if (!empty($auth_user->get('field_user_display')->value)) {
                $string .= ', ' . $auth_user->get('field_user_display')->value;
              }
            }
            else {
              $string .= ',' . $author;
            }
          }
        }
        $vars['output'] = ['#markup' => $string];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function custom_blogs_preprocess_block(&$variables) {
  if ($variables['elements']["#plugin_id"] === 'system_menu_block:account') {
    $variables['#cache']['max-age'] = 0;
    $variables['elements']['#cache']['max-age'] = 0;
    if (!empty($variables['content']['#items']['user.page'])) {
      $variables['content']['#items']['user.page']['url'] = Url::fromUri('route:<nolink>');
      $variables['content']['#items']['user.page']['url']->setOption('attributes', ['data-drupal-link-system-path' => 'user']);
      $variables['content']['#items']['user.page']['title'] = t('@name', ['@name' => \Drupal::currentUser()->getDisplayName()]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function custom_blogs_preprocess_breadcrumb(&$variables) {
  if (strpos(\Drupal::service('path.current')->getPath(), 'taxonomy/term') !== FALSE) {
    if (!empty(\Drupal::request()->query->get('blog')) && $blog_id = Html::escape(\Drupal::request()->query->get('blog'))) {
      if (is_numeric($blog_id) && $blog = Node::load($blog_id)) {
        array_splice($variables['breadcrumb'], 1, 0, [['text' => $blog->getTitle(), 'url' => '/node/'.$blog_id]]);
      }
    }
    $variables['#cache']['max-age'] = 0;
    $variables['elements']['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Change tab names.
 */
function custom_blogs_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name === 'entity.node.canonical') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = \Drupal::routeMatch()->getParameter('node');
    $bundles = ['blog', 'blog_post'];
    if ($node && in_array($node->bundle(), $bundles)) {
      $bundle_label = str_replace('Blog ', '', $node->type->entity->label());
      $data['tabs'][0]['entity.node.edit_form']['#link']['title'] = 'Edit '.$bundle_label;
      $data['tabs'][0]['og.og_admin_routes:node.og_admin_routes']['#link']['title'] = 'Blog Members';
      $og_admin_url = $data['tabs'][0]['og.og_admin_routes:node.og_admin_routes']['#link']['url'];
      $og_admin_members_url = Url::fromRoute('entity.node.og_admin_routes.members', $og_admin_url->getRouteParameters(), $og_admin_url->getOptions());
      $data['tabs'][0]['og.og_admin_routes:node.og_admin_routes']['#link']['url'] = $og_admin_members_url;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $path = \Drupal::service('path.current')->getPath();
  $view = $form_state->getStorage('view');
  if ($view['view']->id() == 'all_posts' || $view['view']->id() == 'all_posts_date') {
    if ($form['#action'] != $path && (strpos($path, 'all-posts') !== FALSE || strpos($path, 'all-dates') !== FALSE)) {
      /*
      //to debug if needed.
      dpm($form['#id']);
      dpm($form['#action']);
      dpm($path);
      */
      $form['#action'] = $path;
    }
    //This moves the search button to the search box.
    $actions['actions'] = $form['actions'];
    unset($form['actions']);
    $positions = array_keys($form);
    $keys_position = array_search('keys', $positions);
    //Note that to actually move actions, it needs to be set within a numerically keyed array.
    array_splice($form, $keys_position + 1, 0, [$actions]);
    $form['keys']['#title_display'] = 'invisible';
    if ($view['view']->id() == 'all_posts') {
      $form['keys']['#title'] = 'Search All Blogs';
    }
    else if ($view['view']->id() == 'all_posts_date') {
      $form['keys']['#title'] = 'Browse by Date';
    }
    $form['#info']['filter-keys']['label'] = $form['keys']['#title'];
    $form['keys']['#placeholder'] = Markup::create(str_replace('search ', 'Search within ', strtolower($form['keys']['#title'])));
    $form['#prefix'] = '<h3>'.$form['keys']['#title'].'</h3>';
    if (strpos($path, 'all-posts') !== FALSE) {
      $form['#suffix'] = '<div><a href="/all-dates">Browse by Date</a></div>';
    }
    $blog_id = NULL;
    $nid = NULL;
    if (!empty(\Drupal::request()->query->get('blog'))) {
      $nid = Html::escape(\Drupal::request()->query->get('blog'));
    }
    if (is_numeric($nid)) {
      $node = Node::load($nid);
      $blog_id = $nid;
    }
    if ($blog_id) {
      $blog = Node::load($blog_id);
      if ($blog) {
        if ($view['view']->id() == 'all_posts') {
          $form['keys']['#title'] = 'Search in ' . $blog->getTitle();
        }
        else if ($view['view']->id() == 'all_posts_date') {
          $form['keys']['#title'] = 'Browse in ' . $blog->getTitle();
        }
        $form['#info']['filter-keys']['label'] = $form['keys']['#title'];
        $form['keys']['#placeholder'] = Markup::create(str_replace('Search ', 'Search within ', $form['keys']['#title']));
        $form['#prefix'] = '<h3>'.$form['keys']['#title'].'</h3>';
      }
    }
  }
  //Unset these if we arent on the all-posts page with optional date
  if (($view['view']->id() == 'all_posts' && !strpos($path, 'all-posts')) || ($view['view']->id() == 'all_posts_date' && !strpos($path, 'all-dates'))) {
    unset($form['blog']);
  }
  if ($view['view']->id() == 'recent_posts') {
    $form['keys']['#title_display'] = 'invisible';
    //This alters the title of the search box and adds a reset link.
    $node = \Drupal::routeMatch()->getParameter('node');
    $blog_id = NULL;
    if (!$node && !empty(\Drupal::request()->query->get('blog'))) {
      $nid = Html::escape(\Drupal::request()->query->get('blog'));
      if (is_numeric($nid)) {
        $node = Node::load($nid);
        $blog_id = $nid;
      }
    }
    else if ($node && $node->hasField('og_audience')) {
      $blog_id = $node->get('og_audience')->target_id;
    }
    if ($blog_id) {
      $blog = Node::load($blog_id);
      if ($blog) {
        $form['#action'] = $blog->toUrl()->toString();
        $form['keys']['#title'] = $form['keys']['#title'] . ' ' . $blog->getTitle();
        $form['#info']['filter-keys']['label'] = $form['#info']['filter-keys']['label'] . ' ' . $blog->getTitle();
      }
    }
    else if ($node) {
      $form['keys']['#title'] = $form['keys']['#title'] . ' ' . $node->getTitle();
      $form['#info']['filter-keys']['label'] = $form['#info']['filter-keys']['label'] . ' ' . $node->getTitle();
    }
    else {
      $form['#attributes']['class'][] = 'hidden';
    }
    $form['keys']['#placeholder'] = Markup::create(str_replace('Search in', 'Search within', $form['keys']['#title']));
    if ($form['actions']['reset']['#access']) {
      $form['#suffix'] = '<div><a href="'.$form['#action'].'">Reset results list</a></div>';
      unset($form['actions']['reset']);
    }
    $form['#prefix'] = '<h3>'.$form['keys']['#title'].'</h3>';
  }
}

/**
 * Implements hook_block_view_alter().
 */
function custom_blogs_block_view_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getDerivativeId() == 'recent_posts-block_1') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!$node && !empty(\Drupal::request()->query->get('blog'))) {
      $nid = Html::escape(\Drupal::request()->query->get('blog'));
      if (!is_numeric($nid)) {
        $build = [];
      }
    }
  }
  if ($block->getDerivativeId() == 'all_posts-page_1') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (\Drupal::routeMatch()->getParameter('node') || 
       (!empty(\Drupal::request()->query->get('blog')) && 
        is_numeric(Html::escape(\Drupal::request()->query->get('blog'))) && 
        \Drupal::routeMatch()->getRouteName() != 'view.all_posts.page_1')) {
      $build = [];
    }
  }
  if ($block->getPluginId() == 'page_title_block') {
    $build['#post_render'][] = function ($html, array $elements) {
      return str_replace('the group ', ' ', $html);
    };
    $build['#post_render'][] = function ($html, array $elements) {
      return str_replace('join', 'subscribe to', $html);
    };
  }
}

/**
 * Implements hook_views_query_alter().
 */
function custom_blogs_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'manage_my_posts' && $view->current_display == 'page_2') {
    $configuration = [
      'type'       => 'INNER',
      'table'      => 'og_membership',
      'field'      => 'entity_id',
      'left_table' => 'node_field_data_node__og_audience',
      'left_field' => 'nid',
      'operator'   => '=',
      'extra'  => [[ 'field' => 'uid', 'value' => $view->args[0] ]],
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);
    $query->addRelationship('og_membership', $join, 'node_field_data_node__og_audience');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function custom_blogs_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'og_members_overview') {
    $view->field['name']->options['settings']['link_to_entity'] = 0;
    $view->field['roles_target_id']->options['settings']['link_to_entity'] = 0;
  }
  if ($view->id() == 'blogs_filtered_by_membership' && $view->current_display == 'entity_reference_1') {
    //arg[0] is loggedin user. pass to get memberships.
    //don't do anything if user is og administrator.
    $user = User::load($view->args[0]);
    if (!$user->hasPermission('administer organic groups')) {
      $og_view = \Drupal::entityTypeManager()
        ->getStorage('view')
        ->load('get_membership_ids')
        ->getExecutable();
      $og_view->initDisplay();
      $og_view->setDisplay('default');
      $og_view->setArguments([$view->args[0]]);
      $og_view->execute();
      $og_result = $og_view->result;
      $blog_ids = [];
      foreach ($og_result as $result) {
        $blog_ids[] = $result->_entity->getGroupId();
      }
      foreach ($view->result as $id => $value) {
        $nid = $value->_entity->id();
        if (!in_array($nid, $blog_ids)) {
          unset($view->result[$id]);
        }
      }
    }
  }
  if ($view->id() == 'blogroll_view' && $view->current_display == 'block_2') {
    //This removes the block if the field isnt set.
    if (count($view->result) == 1 && empty($view->result[0]->_entity->get('field_blogroll')->getValue())) {
      unset($view->result[0]);
    }
  }
  if ($view->id() == 'author' && $view->current_display == 'page_1') {
    $author_display_name = '';
    if (isset($view->args[0]) && $author = user_load_by_name($view->args[0])) {
      $author_display_name = $author->get('field_user_display')->value;
      if (isset($view->args[1])) {
        $author_names = [];
        $conjunction = ' or ';
        if (strpos($view->args[1], ',') !== FALSE) {
          $author_names = explode(',', $view->args[1]);
          $conjunction = ' and ';
        }
        else if (strpos($view->args[1], '+') !== FALSE) {
          $author_names = explode('+', $view->args[1]);
        }
        else if (strpos($view->args[1], ' ') !== FALSE) {
          $author_names = explode(' ', $view->args[1]);
        }
        else {
          $author_names[] = $view->args[1];
        }
        $last = array_key_last($author_names);
        foreach ($author_names as $key => $author_name) {
          if ($author_name != $view->args[0]) {
            $join = ', ';
            if ($key == $last) {
              $join = $conjunction;
            }
            $author = user_load_by_name($author_name);
            $author_display_name .= $join . $author->get('field_user_display')->value;
          }
        }
      }
      $view->setTitle('Posts by '. $author_display_name);
    }
  }
  if ($view->id() == 'blogs_rss' && in_array($view->current_display, ['feed_2', 'feed_4', 'feed_5'])) {
    $broken_title = explode(' - ', $view->getTitle());
    $blog = Node::load(trim($broken_title[0]));
    if ($blog) {
      $title = $blog->getTitle() . ' - ' . $broken_title[1];
      $view->setTitle($title);
    }
  }
}

/**
+ * Implements hook_views_pre_view().
+ */
function custom_blogs_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'blogs_rss' && in_array($view->current_display, ['feed_2', 'feed_4', 'feed_5'])) {
    //no idea why this happens on some blogs andnot others.
    if (!is_numeric($args[0])) {
      $args[0] = str_replace('/node/', '',\Drupal::service('path_alias.manager')->getPathByAlias('/'.$args[0]));
    }
  }
//here for debug if we need arg alterations.
//$alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$args[0]);
}

/**
+ * Implements hook_views_post_render().
+ */
function custom_blogs_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  if ($view->id() == 'taxonomy_term' && $view->current_display == 'page_1') {
    if (isset($view->args[1]) && $view->args[1] != 'all') {
      $blog_id = $view->args[1];
      if ($blog = Node::load($blog_id)) {
        $title = $blog->getTitle();
        $view->setTitle($view->getTitle() . ' in Blog <em>' . $title . '</em>');
      }
      unset($output['#view']->field['og_audience']);
    }
  }
  if ($view->id() == 'browse_by_tag' && $view->current_display == 'block_2') {
    if (isset($view->args[0]) && is_numeric($view->args[0])) {
      $blog_id = $view->args[0];
      $blog = Node::load($blog_id);
      $title = $blog->getTitle();
      $view->setTitle($view->getTitle() . ' in <em>' . $title . '</em>');
    }
  }
  if ($view->id() == 'recent_posts' && $view->current_display == 'block_1') {
    if (is_numeric(\Drupal::request()->get('blog'))) {
      $blog_id = Html::escape(\Drupal::request()->get('blog'));
      $blog = Node::load($blog_id);
      $title = $blog->getTitle();
      $view->setTitle('Posts in ' . $title);
    }
    else {
      $blog_id = $view->args[0];
      $blog = Node::load($blog_id);
      $title = $blog->getTitle();
      $view->setTitle('Posts in ' . $title);
    }
  }
}
