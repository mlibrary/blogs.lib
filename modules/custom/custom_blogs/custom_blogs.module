<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_node_blog_post_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $account = \Drupal::currentUser();
  $accessible = _custom_blogs_test_og_access($node, 'edit', $account);
  if (!empty($accessible)) {
    foreach ($accessible as $gid => $access) {
      switch ($access) {
        case 'blog_manager':
          //Managers should be able to do anything from core and og.
        break;
        case 'blog_author':
          //Authors should be able to do anything from core and og.
        break;
        case 'blog_drafter':
          if (count($accessible) > 1) {
            $form['drafter_gid'] = [
              '#type' => 'value',
              '#value' => $gid,
            ];
            array_unshift($form['#validate'], '_custom_blogs_form_blog_post_publish_validate');
          }
        break;
        case 'blog_member':
          unset($form['og_audience']['widget']['#options'][$gid]);
        break;
      }
    }
  }
  array_unshift($form['#validate'], '_custom_blogs_form_blog_post_set_author');
}

/**
 * custom_validate for blog_post_publish().
 */
function _custom_blogs_form_blog_post_publish_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $gid = $form_state->getValue('og_audience')[0]['target_id'];
  $drafter_gid = $form_state->getValue('drafter_gid');
  if ($gid == $drafter_gid) {
    $blog_name = \Drupal\node\Entity\Node::load($gid)->getTitle();
    if ($form_state->getValue('status')['value'] == 1) {
      $form_state->setErrorByName('status', t('You do not have publishing access in ' . $blog_name.'. Uncheck Published at the bottom of the page and save.'));
    }
    if (!empty($form_state->getValue('publish_on')[0]['value'])) {
      $form_state->setErrorByName('publish_on', t('You do not have publishing access in ' . $blog_name.' Unset "Scheduling options->Publish on" and save.'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_node_blog_post_edit_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $account = \Drupal::currentUser();
  $accessible = _custom_blogs_test_og_access($node, 'edit', $account);
  if (!empty($accessible)) {
    foreach ($accessible as $gid => $access) {
      switch ($access) {
        case 'blog_manager':
          //Managers should be able to do anything from core and og.
        break;
        case 'blog_author':
          //Authors should be able to do anything from core and og.
        break;
        case 'blog_drafter':
          if ($gid == $node->get('og_audience')->target_id) {
            $form['publish_on']['#disabled'] = TRUE;
            $form['status']['#disabled'] = TRUE;
          }
          $form['drafter_gid'] = [
            '#type' => 'value',
            '#value' => $gid,
          ];
          array_unshift($form['#validate'], '_custom_blogs_form_blog_post_publish_validate');
        break;
        case 'blog_member':
          unset($form['og_audience']['widget']['#options'][$gid]);
          //this should come from og -  return \Drupal\Core\Access\AccessResult::forbidden(); //view only.
        break;
      }
    }
  }
  array_unshift($form['#validate'], '_custom_blogs_form_blog_post_set_author');
}

/**
 * custom_validate for blog_post_form().
 */
function _custom_blogs_form_blog_post_set_author(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $authors = $form_state->getValue('field_author_s_');
  $has_author = FALSE;
  foreach ($authors as $key => $author) {
    if (is_numeric($key) && isset($author['target_id']) && !empty($author['target_id'])) {
      $has_author = TRUE;
      break;
    }
  }
  if (!$has_author) {
    $form_state->setValue('field_author_s_', [['target_id' => $form_state->getValue('uid')[0]['target_id']]]);
  }
}

/**
 * Implements hook_node_access().
 */
function custom_blogs_node_access($node, $op, $account){
//  $access = _custom_blogs_test_og_access($node, $op, $account);
}

function _custom_blogs_test_og_access($node, $op, $account, $gid = 'all'){
  if ($op == 'view' || $account->hasPermission('administer_user')) {
    return;
  }
  $memberships = \Drupal::service('og.membership_manager')->getMemberships($account->id());
  $roles = $account->getRoles();
  if ($node->id() && $gid != 'all') {
    $gid = $node->id();
    if ($node->hasField('og_audience')) {
      $gid = $node->get('og_audience')->target_id;
    }
  }
  $og_roles = [];
  // Access in this order.
  $all_og_roles = ['blog_manager', 'blog_author', 'blog_drafter', 'blog_member'];
  foreach ($memberships as $membership) {
    if ($membership->getGroupId() != $gid && $gid != 'all') {
      continue;
    }
    else {
      $get_gid = $membership->getGroupId();
    }
    $get_og_roles = $membership->getRoles();
    foreach ($get_og_roles as $get_og_role) {
      $get_og_role = str_replace('node-', '', $get_og_role->id());
      $get_og_role = str_replace('-', '_', $get_og_role);
      $og_roles[$get_gid][] = $get_og_role;
    }
    if (count($og_roles[$get_gid]) == 1) {
      $og_roles[$get_gid] = $og_roles[$get_gid][0];
    }
    else {
      foreach ($all_og_roles as $all_og_role) {
        if (in_array($all_og_role, $og_roles[$get_gid])) {
          //use the 'highest' role
          $og_roles[$get_gid] = $all_og_role;
          break;
        }
      }
    }
  }
  if ($gid == 'all') {
    return $og_roles;
  }
  //Check if user has extra core roles from another group.
  $extra_roles = array_diff($roles, $og_roles);
  foreach ($extra_roles as $key => $value) {
    if (strpos($value, 'blog_') === FALSE) {
      unset($extra_roles[$key]);
    }
  }
  //Most users probably have only one group. //hmmm. we dont want to allow create on another group....
  if (empty($extra_roles)) {
    return;
  }
  foreach ($all_og_roles as $all_og_role) {
    if (in_array($all_og_role, $og_roles)) {
      //return the 'highest' role
      return [$gid => $all_og_role];
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function custom_blogs_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'views_form_og_members_overview_default_node') !== FALSE) {
    unset($form['header']['og_membership_bulk_form']['action']['#options']['og_membership_approve_pending_action']);
    unset($form['header']['og_membership_bulk_form']['action']['#options']['og_membership_block_action']);
    unset($form['header']['og_membership_bulk_form']['action']['#options']['og_membership_unblock_action']);
  }
  $og_default_forms = ['og_membership_default_edit_form', 'og_membership_default_add_form'];
  $og_multiple_forms = ['og_membership_add_multiple_roles_action_form', 'og_membership_remove_multiple_roles_action_form'];
  if (!\Drupal::currentUser()->hasPermission('administer_user')) {
    if (in_array($form_id, $og_default_forms)) {
      unset($form['roles']['widget']['#options']['node-blog-administrator']);
    }
    if (in_array($form_id, $og_multiple_forms)) {
      unset($form['roles']['#options']['node-blog-administrator']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_user_form_alter(&$form, &$form_state, $form_id) {
  if (!\Drupal::currentUser()->hasPermission('administer_user')) {
    $form['account']['name']['#type'] = 'hidden';
    $form['field_user_last']['#type'] = 'hidden';
    $form['field_user_first']['#type'] = 'hidden';
    $form['field_user_display']['#type'] = 'hidden';
    $form['field_user_title']['#type'] = 'hidden';
  }
  if (empty($form['account']['name']['#default_value'])) {
    $form['account']['name']['#value'] = user_password();
  }
  array_unshift($form['#validate'], '_custom_blogs_form_user_register_validate');
}

/**
 * custom_validate for user_form_alter().
 */
function _custom_blogs_form_user_register_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $email = $form_state->getValue('mail');
  $uname = NULL;
  if ($email) {
    $uname = explode('@', $email);
    if ($uname[1] == 'umich.edu') {
      $uname = $uname[0];
    }
    else {
      $uname = $email;
    }
  }
  if ($uname) {
    $form_state->setValue('name', $uname);
    $form_state->setValue('edit_name', $uname);
  }
  else {
    $form_state->setErrorByName('blogs_username_error', t('Cannot create user ' . $uname));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_og_membership_default_add_form_alter(&$form, &$form_state, $form_id) {
  // Note: requires create_user_permission module.
  if (\Drupal::currentUser()->hasPermission('create users')  || \Drupal::currentUser()->hasPermission('administer_user')) {
    array_unshift($form['#validate'], '_custom_blogs_form_og_membership_add_validate');
    $form['uid']['widget'][0]['target_id']['#description'] = \Drupal\Core\Field\FieldFilteredMarkup::create('<p>Select an existing user from the dropdown menu after typing the first few letters OR<br/>enter a UM Id or an email address.<br/>Non UM email addresses will need a friend account created. See <a href="https://documentation.its.umich.edu/node/305" target="_blank">Create a Friend Account for Guest Access to U-M Computing Resources</a> for details.</p>');
  }
  $form['state']['#type'] = 'hidden';
  $form['state']['#access'] = 0;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_og_membership_default_edit_form_alter(&$form, &$form_state, $form_id) {
  // Note: requires create_user_permission module.
  if (\Drupal::currentUser()->hasPermission('create users')  || \Drupal::currentUser()->hasPermission('administer_user')) {
    array_unshift($form['#validate'], '_custom_blogs_form_og_membership_edit_validate');
  }
  $form['state']['#type'] = 'hidden';
  $form['state']['#access'] = 0;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_og_membership_add_multiple_roles_action_form_alter(&$form, &$form_state, $form_id) {
  // Note: requires create_user_permission module.
  if (\Drupal::currentUser()->hasPermission('create users')  || \Drupal::currentUser()->hasPermission('administer_user')) {
    array_unshift($form['#validate'], '_custom_blogs_form_og_membership_add_multiple_validate');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_og_membership_remove_multiple_roles_action_form_alter(&$form, &$form_state, $form_id) {
  // Note: requires create_user_permission module.
  if (\Drupal::currentUser()->hasPermission('create users')  || \Drupal::currentUser()->hasPermission('administer_user')) {
    array_unshift($form['#validate'], '_custom_blogs_form_og_membership_remove_multiple_validate');
  }
}

/**
 * custom_validate for og_membership_add_multiple_roles_action_form_alter().
 */
function _custom_blogs_form_og_membership_add_multiple_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $user_input = $form_state->getUserInput();
  $new_user_roles = $user_input['roles'];
  foreach ($new_user_roles as $key => $role) {
    if (!empty($role) && $role != 'node-blog-administrator') {
     $role = str_replace('node-', '', $role);
     $role = str_replace('-', '_', $role);
     $new_user_roles[] = $role;
    }
    unset($new_user_roles[$key]);
  }
  $members = $form_state->getBuildInfo()['callback_object']->getMemberships();
  foreach ($members as $mid => $member) {
    $user = $member->getOwner();
    $user_name = $user->getAccountName();
    foreach ($new_user_roles as $role) {
      $user->addRole($role);
    }
    $user->save();
  }
}

/**
 * custom_validate for og_membership_remove_multiple_roles_action_form_alter().
 */
function _custom_blogs_form_og_membership_remove_multiple_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $user_input = $form_state->getUserInput();
  $new_user_roles = $user_input['roles'];
  foreach ($new_user_roles as $key => $role) {
    if (!empty($role) && $role != 'node-blog-administrator') {
     $role = str_replace('node-', '', $role);
     $role = str_replace('-', '_', $role);
     $new_user_roles[] = $role;
    }
    unset($new_user_roles[$key]);
  }
  $members = $form_state->getBuildInfo()['callback_object']->getMemberships();
  foreach ($members as $mid => $member) {
    $gid = $member->getGroupId();
    $user = $member->getOwner();
    $user_name = $user->getAccountName();
    $memberships = \Drupal::service('og.membership_manager')->getMemberships($user->id());
    $all_roles = [];
    foreach ($memberships as $membership) {
      if ($membership->getGroupId() == $gid) {
        continue;
      }
      $og_roles = $membership->getRoles();
      foreach ($og_roles as $og_role) {
        if ($og_role->getName() != 'member') {
          $all_roles[] = 'blog_' . $og_role->getName();
        }
      }
    }
    $all_roles = array_unique($all_roles);
    $user_roles = array_diff($new_user_roles, $all_roles);
    foreach ($user_roles as $role) {
      $user->removeRole($role);
    }
    $user->save();
  }
}

/**
 * custom_validate for og_membership_default_edit_form_alter().
 */
function _custom_blogs_form_og_membership_edit_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $user_input = $form_state->getUserInput();
  $new_user_roles = $user_input['roles'];
  unset($new_user_roles['node-blog-administrator']);
  $user_no_roles = [];
  //Add roles.
  foreach ($new_user_roles as $key => $role) {
    if (!empty($role)) {
      $role = str_replace('node-', '', $role);
      $role = str_replace('-', '_', $role);
      $new_user_roles[] = $role;
    }
    else {
      $no_role = str_replace('node-', '', $key);
      $no_role = str_replace('-', '_', $no_role);
      $user_no_roles[] = $no_role;
    }
    unset($new_user_roles[$key]);
  }
  $user = $form['uid']['widget'][0]['target_id']['#default_value'][0];
  $user_name = $user->getAccountName();
  foreach ($new_user_roles as $role) {
    $user->addRole($role);
  }
  //Remove unused roles.
  $memberships = \Drupal::service('og.membership_manager')->getMemberships($user->id());
  $all_roles = [];
  foreach ($memberships as $membership) {
    if ($membership->getGroupId() == $form['entity_id']['#value']) {
      continue;
    }
    $og_roles = $membership->getRoles();
    foreach ($og_roles as $og_role) {
      if ($og_role->getName() != 'member') {
        $all_roles[] = 'blog_' . $og_role->getName();
      }
    }
  }
  $all_roles = array_unique($all_roles);
  $user_roles = array_diff($user_no_roles, $all_roles);
  foreach ($user_roles as $role) {
    $user->removeRole($role);
  }
  $user->save();
}

/**
 * custom_validate for og_membership_default_add_form_alter().
 */
function _custom_blogs_form_og_membership_add_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (empty($form_state->getValue('uid')[0]['target_id'])) {
    $user_input = $form_state->getUserInput();
    $new_user_name = trim($user_input['uid'][0]['target_id']);
    $uname = explode('@', $new_user_name);
    if ($uname[1] == 'umich.edu') {
      $new_user_name = $uname[0];
    }
    $new_user_roles = $user_input['roles'];
    foreach ($new_user_roles as $key => $role) {
      if (!empty($role) && $role != 'node-blog-administrator') {
       $role = str_replace('node-', '', $role);
       $role = str_replace('-', '_', $role);
       $new_user_roles[] = $role;
      }
      unset($new_user_roles[$key]);
    }
    $new_user = NULL;
    if (strpos($new_user_name, '@') === FALSE) {
      if (user_validate_name($new_user_name)) {
        $form_state->setErrorByName('uid', t('The username %name is not valid.', array('%name' => $new_user_name)));
        return;
      }
      $user_data = _get_mcommunity_user($new_user_name);
      if (isset($user_data['mail']) && !empty($user_data['mail'])) {
        $new_user = \Drupal\user\Entity\User::create([
            'name' => $new_user_name,
            'mail' => $user_data['mail'],
            'pass' => user_password(),
            'status' => 1,
            'roles' => $new_user_roles,
        ]);
      }
    }
    else {
      if (!\Drupal::service('email.validator')->isValid($new_user_name)) {
        $form_state->setErrorByName('uid', t('The email address %mail is not valid.', array('%mail' => $new_user_name)));
        return;
      }
      if (user_validate_name($new_user_name)) {
        $form_state->setErrorByName('uid', t('The username %name is not valid.', array('%name' => $new_user_name)));
        return;
      }
      $message = \Drupal\Core\Render\Markup::create('<strong>There must be a friend account associated with this email address for user with id '.$new_user_name.' to log into this site. See <a href="https://documentation.its.umich.edu/node/305" target="_blank">Create a Friend Account for Guest Access to U-M Computing Resources</a></strong>');
      $messenger = \Drupal::messenger();
      $messenger->addMessage($message, $messenger::TYPE_WARNING);
      $new_user = \Drupal\user\Entity\User::create([
          'name' => $new_user_name,
          'mail' => $new_user_name,
          'pass' => user_password(),
          'status' => 1,
          'roles' => $new_user_roles,
      ]);
    }
    if ($new_user instanceof \Drupal\user\Entity\User) {
      $new_user->save();
      $form_state->setValue('uid', [['target_id' => $new_user->id()]]);
      $user_input['uid'][0]['target_id'] = $new_user->id();
      $form_state->setUserInput($user_input);
    }
    else {
      $message = \Drupal\Core\Render\Markup::create('<strong>No valid UM user was found with id '.$user_input['uid'][0]['target_id'].'. Please verify the id at <a href="https://mcommunity.umich.edu/" target="_blank">MCommunity</a> or enter a non UM email address and create a friend account at <a href="https://documentation.its.umich.edu/node/305" target="_blank">https://documentation.its.umich.edu/node/305</a>.</strong>');
      $messenger = \Drupal::messenger();
      $messenger->addMessage($message, $messenger::TYPE_ERROR);
    }
  }
}

/**
 * get data from mcommunity().
 */
function _get_mcommunity_user($name) {
  $user_data = [];
  if ($mcomm = \Drupal\Core\Site\Settings::get('mcommunity')) {
    $ldap_config = parse_ini_file($mcomm, TRUE);
    $ldap_resource = ldap_connect($ldap_config['connect']['uri']);
    ldap_bind($ldap_resource, $ldap_config['bind']['dn'], $ldap_config['bind']['pw']);
    $ldap_result = ldap_search(
      $ldap_resource,
      "ou=People,dc=umich,dc=edu",
      "(uid=".$name.")",
      ['entityid','displayName','title','mail','givenname','sn','umichtitle',]
    );
    $ldap_entries = ldap_get_entries($ldap_resource, $ldap_result);
    $raw_data = array_filter($ldap_entries[0], function($k) { return !is_numeric($k); }, ARRAY_FILTER_USE_KEY);
    foreach ($raw_data as $key => $data) {
      $user_data[$key] = $data[0];
    }
  }

  return $user_data;
}

/**
* Implements hook_ENTITY_TYPE_presave().
*/
function custom_blogs_paragraph_presave($entity) {
  if ($entity->bundle() == 'get_in_touch') {
    _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
  }
}

/**
* Implements hook_ENTITY_TYPE_insert().
*/
function custom_blogs_paragraph_insert($entity) {
  if ($entity->bundle() == 'get_in_touch') {
    _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
  }
}

/**
* Implements hook_ENTITY_TYPE_update().
*/
function custom_blogs_paragraph_update($entity) {
  if ($entity->bundle() == 'get_in_touch') {
    _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
  }
}

/**
* Implements hook_ENTITY_TYPE_presave().
*/
function custom_blogs_user_presave($user) {
  $user_name = $user->getAccountName();
  if (strpos($user_name, '@') === FALSE) {
    $user_data = _get_mcommunity_user($user_name);
    if (!empty($user_data['sn'])) {
      $user->get('field_user_last')->setValue([['value' => $user_data['sn']]]);
    }
    if (!empty($user_data['givenname'])) {
      $user->get('field_user_first')->setValue([['value' => $user_data['givenname']]]);
    }
    if (!empty(trim($user_data['displayname']))) {
      $user->get('field_user_display')->setValue([['value' => $user_data['displayname']]]);
    }
    else if (!empty($user_data['sn']) && !empty($user_data['givenname'])) {
      $user->get('field_user_display')->setValue([['value' => $user_data['givenname'].' '.$user_data['sn']]]);
    }
    if (!empty($user_data['umichtitle'])) {
      $user->get('field_user_title')->setValue([['value' => $user_data['umichtitle']]]);
    }
  }
}

/**
* Implements hook_ENTITY_TYPE_view_alter().
*/
function custom_blogs_paragraph_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'get_in_touch') {
    $is_empty = _custom_blogs_make_sure_we_delete_empty_paragraphs($entity);
    if (!$is_empty) {
      $name = trim($entity->get('field_name')->value);
      $email = trim($entity->get('field_email')->value);
      if (empty($name)) {
        unset($build['field_name']);
      }
      else if (empty($email)) {
        unset($build['field_email']);
      }
    }
  }
}

/**
 * custom function to remove empty paragraphs().
 */
// see if https://www.drupal.org/project/paragraphs/issues/2877695 is ever solved.
function _custom_blogs_make_sure_we_delete_empty_paragraphs($entity) {
  $name = trim($entity->get('field_name')->value);
  $email = trim($entity->get('field_email')->value);
  if (empty($name) && empty($email)) {
    $entity->delete();
    return TRUE;
  }
  return FALSE;
}

/**
* Implements hook_ENTITY_TYPE_view_alter().
*/
function custom_blogs_node_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'blog_post') {
    $tags = $entity->get('field_blog_tag');
    if ($tags && isset($build['field_blog_tag'][0]['#url']) && $entity->get('og_audience')) {
      foreach ($tags as $delta => $tag) {
        $build['field_blog_tag'][$delta]['#url']->setOption('query', [
          'blog' => $entity->get('og_audience')->target_id,
        ]);
      }
    }
  }
  if ($entity->bundle() == 'blog' && $display->id() == 'node.blog.subscribe') {
    $build['#post_render'][] = function ($html, array $elements) {
      return str_replace(' group', ' '.$elements['#node']->label(), $html);
    };
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function custom_blogs_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  // Skip "Confirm deletion / Restore actions" behavior for all paragraphs.
  // see https://www.drupal.org/node/2831409
  $element['top']['links']['remove_button']['#paragraphs_mode'] = 'removed';
}

/**
 * Implements hook_page_attachments().
 */
function custom_blogs_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'custom_blogs/login-return-page-link';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function custom_blogs_preprocess_block(&$variables) {
  if ($variables['elements']["#plugin_id"] === 'system_menu_block:account') {
    $variables['#cache']['max-age'] = 0;
    $variables['elements']['#cache']['max-age'] = 0;
    if (!empty($variables['content']['#items']['user.page'])) {
      $variables['content']['#items']['user.page']['url'] = Drupal\Core\Url::fromUri('route:<nolink>');
      $variables['content']['#items']['user.page']['url']->setOption('attributes', ['data-drupal-link-system-path' => 'user']);
      $variables['content']['#items']['user.page']['title'] = t('@name', ['@name' => \Drupal::currentUser()->getDisplayName()]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function custom_blogs_preprocess_breadcrumb(&$variables) {
  if (strpos(\Drupal::service('path.current')->getPath(), 'taxonomy/term') !== FALSE) {
    if ($blog_id = \Drupal\Component\Utility\Html::escape(\Drupal::request()->query->get('blog'))) {
      if (is_numeric($blog_id) && $blog = \Drupal\node\Entity\Node::load($blog_id)) {
        array_splice($variables['breadcrumb'], 1, 0, [['text' => $blog->getTitle(), 'url' => '/node/'.$blog_id]]);
      }
    }
    $variables['#cache']['max-age'] = 0;
    $variables['elements']['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Change tab names.
 */
function custom_blogs_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name === 'entity.node.canonical') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = \Drupal::routeMatch()->getParameter('node');
    $bundles = ['blog', 'blog_post'];
    if ($node && in_array($node->bundle(), $bundles)) {
      $bundle_label = str_replace('Blog ', '', $node->type->entity->label());
      $data['tabs'][0]['entity.node.edit_form']['#link']['title'] = 'Edit '.$bundle_label;
      $data['tabs'][0]['og.og_admin_routes:node.og_admin_routes']['#link']['title'] = 'Blog Members';
      $og_admin_url = $data['tabs'][0]['og.og_admin_routes:node.og_admin_routes']['#link']['url'];
      $og_admin_members_url = \Drupal\Core\Url::fromRoute('entity.node.og_admin_routes.members', $og_admin_url->getRouteParameters(), $og_admin_url->getOptions());
      $data['tabs'][0]['og.og_admin_routes:node.og_admin_routes']['#link']['url'] = $og_admin_members_url;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_blogs_form_views_exposed_form_alter(array &$form, $form_state, $form_id) {
  $path = \Drupal::service('path.current')->getPath();
  $view = $form_state->getStorage('view');
  if ($view['view']->id() == 'all_posts' || $view['view']->id() == 'all_posts_date') {
    if ($form['#action'] != $path && (strpos($path, 'all-posts') !== FALSE || strpos($path, 'all-dates') !== FALSE)) {
      /*
      //to debug if needed.
      dpm($form['#id']);
      dpm($form['#action']);
      dpm($path);
      */
      $form['#action'] = $path;
    }
    //This moves the search button to the search box.
    $actions['actions'] = $form['actions'];
    unset($form['actions']);
    $positions = array_keys($form);
    $keys_position = array_search('keys', $positions);
    //Note that to actually move actions, it needs to be set within a numerically keyed array.
    array_splice($form, $keys_position + 1, 0, [$actions]);
    $form['keys']['#title_display'] = 'invisible';
    if ($view['view']->id() == 'all_posts') {
      $form['keys']['#title'] = 'Search All Blogs';
    }
    else if ($view['view']->id() == 'all_posts_date') {
      $form['keys']['#title'] = 'Browse by Date';
    }
    $form['#info']['filter-keys']['label'] = $form['keys']['#title'];
    $form['keys']['#placeholder'] = \Drupal\Core\Render\Markup::create(str_replace('search ', 'Search within ', strtolower($form['keys']['#title'])));
    $form['#prefix'] = '<h3>'.$form['keys']['#title'].'</h3>';
    if (strpos($path, 'all-posts') !== FALSE) {
      $form['#suffix'] = '<div><a href="/all-dates">Browse by Date</a></div>';
    }
    $blog_id = NULL;
    $nid = \Drupal::request()->query->get('blog');
    if (is_numeric($nid)) {
      $node = \Drupal\node\Entity\Node::load($nid);
      $blog_id = $nid;
    }
    if ($blog_id) {
      $blog = \Drupal\node\Entity\Node::load($blog_id);
      if ($blog) {
        if ($view['view']->id() == 'all_posts') {
          $form['keys']['#title'] = 'Search in ' . $blog->getTitle();
        }
        else if ($view['view']->id() == 'all_posts_date') {
          $form['keys']['#title'] = 'Browse in ' . $blog->getTitle();
        }
        $form['#info']['filter-keys']['label'] = $form['keys']['#title'];
        $form['keys']['#placeholder'] = \Drupal\Core\Render\Markup::create(str_replace('Search ', 'Search within ', $form['keys']['#title']));
        $form['#prefix'] = '<h3>'.$form['keys']['#title'].'</h3>';
      }
    }
  }
  //Unset these if we arent on the all-posts page with optional date
  if (($view['view']->id() == 'all_posts' && !strpos($path, 'all-posts')) || ($view['view']->id() == 'all_posts_date' && !strpos($path, 'all-dates'))) {
    unset($form['blog']);
  }
  if ($view['view']->id() == 'recent_posts') {
    $form['keys']['#title_display'] = 'invisible';
    //This alters the title of the search box and adds a reset link.
    $node = \Drupal::routeMatch()->getParameter('node');
    $blog_id = NULL;
    if (!$node) {
      $nid = \Drupal::request()->query->get('blog');
      if (is_numeric($nid)) {
        $node = \Drupal\node\Entity\Node::load($nid);
        $blog_id = $nid;
      }
    }
    else if ($node->hasField('og_audience')) {
      $blog_id = $node->get('og_audience')->target_id;
    }
    if ($blog_id) {
      $blog = \Drupal\node\Entity\Node::load($blog_id);
      if ($blog) {
        $form['#action'] = $blog->toUrl()->toString();
        $form['keys']['#title'] = $form['keys']['#title'] . ' ' . $blog->getTitle();
        $form['#info']['filter-keys']['label'] = $form['#info']['filter-keys']['label'] . ' ' . $blog->getTitle();
      }
    }
    else if ($node) {
      $form['keys']['#title'] = $form['keys']['#title'] . ' ' . $node->getTitle();
      $form['#info']['filter-keys']['label'] = $form['#info']['filter-keys']['label'] . ' ' . $node->getTitle();
    }
    $form['keys']['#placeholder'] = \Drupal\Core\Render\Markup::create(str_replace('Search in', 'Search within', $form['keys']['#title']));
    if ($form['actions']['reset']['#access']) {
      $form['#suffix'] = '<div><a href="'.$form['#action'].'">Reset results list</a></div>';
      unset($form['actions']['reset']);
    }
    $form['#prefix'] = '<h3>'.$form['keys']['#title'].'</h3>';
  }
}

/**
 * Implements hook_block_view_alter().
 */
function custom_blogs_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  if ($block->getDerivativeId() == 'recent_posts-block_1') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!$node) {
      $nid = \Drupal::request()->query->get('blog');
      if (!is_numeric($nid)) {
        $build = [];
      }
    }
  }
  if ($block->getDerivativeId() == 'all_posts-page_1') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (\Drupal::routeMatch()->getParameter('node') || (is_numeric(\Drupal::request()->query->get('blog')) && \Drupal::routeMatch()->getRouteName() != 'view.all_posts.page_1')) {
      $build = [];
    }
  }
  if ($block->getPluginId() == 'page_title_block') {
    $build['#post_render'][] = function ($html, array $elements) {
      return str_replace('the group ', ' ', $html);
    };
    $build['#post_render'][] = function ($html, array $elements) {
      return str_replace('join', 'subscribe to', $html);
    };
  }
}

/**
 * Implements hook_views_query_alter().
 */
function custom_blogs_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  if ($view->id() == 'manage_my_posts' && $view->current_display == 'page_2') {
    $configuration = [
      'type'       => 'INNER',
      'table'      => 'og_membership',
      'field'      => 'entity_id',
      'left_table' => 'node_field_data_node__og_audience',
      'left_field' => 'nid',
      'operator'   => '=',
      'extra'  => [[ 'field' => 'uid', 'value' => $view->args[0] ]],
    ];
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $query->addRelationship('og_membership', $join, 'node_field_data_node__og_audience');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function custom_blogs_views_pre_render(\Drupal\views\ViewExecutable $view) {
  if ($view->id() == "author" && $view->current_display == 'page_1') {
    $nids = [];
    foreach($view->result as $id => $value){
      $nid = $value->_entity->id();
      if (in_array($nid, $nids)) {
        unset($view->result[$id]);
      }
      else {
        $nids[] = $nid;
      }
    }
    $view->total_rows = count($view->result);
  }
  if ($view->id() == 'og_members_overview') {
    $view->field['name']->options['settings']['link_to_entity'] = 0;
  }
  if ($view->id() == 'blogs_filtered_by_membership' && $view->current_display == 'entity_reference_1') {
    //arg[0] is loggedin user. pass to get memberships.
    //don't do anything if user is og administrator.
    $user = \Drupal\user\Entity\User::load($view->args[0]);
    if (!$user->hasPermission('administer organic groups')) {
      $og_view = \Drupal::entityTypeManager()
        ->getStorage('view')
        ->load('get_membership_ids')
        ->getExecutable();
      $og_view->initDisplay();
      $og_view->setDisplay('default');
      $og_view->setArguments([$view->args[0]]);
      $og_view->execute();
      $og_result = $og_view->result;
      $blog_ids = [];
      foreach ($og_result as $result) {
        $blog_ids[] = $result->_entity->getGroupId();
      }
      foreach ($view->result as $id => $value) {
        $nid = $value->_entity->id();
        if (!in_array($nid, $blog_ids)) {
          unset($view->result[$id]);
        }
      }
    }
  }
  if ($view->id() == 'blogroll_view' && $view->current_display == 'block_2') {
    //This removes the block if the field isnt set.
    if (count($view->result) == 1 && empty($view->result[0]->_entity->get('field_blogroll')->getValue())) {
      unset($view->result[0]);
    }
  }
  if ($view->id() == 'author' && $view->current_display == 'page_1') {
    $author_display_name = '';
    if (isset($view->args[0]) && $author = user_load_by_name($view->args[0])) {
      $author_display_name = $author->get('field_user_display')->value;
      if (isset($view->args[1])) {
        $author_names = [];
        $conjunction = ' or ';
        if (strpos($view->args[1], ',') !== FALSE) {
          $author_names = explode(',', $view->args[1]);
          $conjunction = ' and ';
        }
        else if (strpos($view->args[1], '+') !== FALSE) {
          $author_names = explode('+', $view->args[1]);
        }
        else if (strpos($view->args[1], ' ') !== FALSE) {
          $author_names = explode(' ', $view->args[1]);
        }
        else {
          $author_names[] = $view->args[1];
        }
        $last = array_key_last($author_names);
        foreach ($author_names as $key => $author_name) {
          if ($author_name != $view->args[0]) {
            $join = ', ';
            if ($key == $last) {
              $join = $conjunction;
            }
            $author = user_load_by_name($author_name);
            $author_display_name .= $join . $author->get('field_user_display')->value;
          }
        }
      }
      $view->setTitle('Posts by '. $author_display_name);
    }
  }
  if ($view->id() == 'blogs_rss' && in_array($view->current_display, ['feed_2', 'feed_4', 'feed_5'])) {
    $broken_title = explode(' - ', $view->getTitle());
    $blog = \Drupal\node\Entity\Node::load(trim($broken_title[0]));
    if ($blog) {
      $title = $blog->getTitle() . ' - ' . $broken_title[1];
      $view->setTitle($title);
    }
  }
}

/**
+ * Implements hook_views_pre_view().
+ */
function custom_blogs_views_pre_view(\Drupal\views\ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'blogs_rss' && in_array($view->current_display, ['feed_2', 'feed_4', 'feed_5'])) {
    //no idea why this happens on some blogs andnot others.
    if (!is_numeric($args[0])) {
      $args[0] = str_replace('/node/', '',\Drupal::service('path_alias.manager')->getPathByAlias('/'.$args[0]));
    }
  }
//here for debug if we need arg alterations.
//$alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$args[0]);
}

/**
+ * Implements hook_views_post_render().
+ */
function custom_blogs_views_post_render(\Drupal\views\ViewExecutable $view, array &$output, \Drupal\views\Plugin\views\cache\CachePluginBase $cache) {
  if ($view->id() == 'taxonomy_term' && $view->current_display == 'page_1') {
    if (isset($view->args[1]) && $view->args[1] != 'all') {
      $blog_id = $view->args[1];
      if ($blog = \Drupal\node\Entity\Node::load($blog_id)) {
        $title = $blog->getTitle();
        $view->setTitle($view->getTitle() . ' in Blog <em>' . $title . '</em>');
      }
      unset($output['#view']->field['og_audience']);
    }
  }
  if ($view->id() == 'browse_by_tag' && $view->current_display == 'block_2') {
    if (isset($view->args[0]) && is_numeric($view->args[0])) {
      $blog_id = $view->args[0];
      $blog = \Drupal\node\Entity\Node::load($blog_id);
      $title = $blog->getTitle();
      $view->setTitle($view->getTitle() . ' in <em>' . $title . '</em>');
    }
  }
  if ($view->id() == 'recent_posts' && $view->current_display == 'block_1') {
    if (empty(\Drupal::request()->get('keys'))) {
      //This sets the title if the search keys are empty.
//im not sure we need this      $view->setTitle('Recent Posts');
    }
    if (is_numeric(\Drupal::request()->get('blog'))) {
      $blog_id = \Drupal::request()->get('blog');
      $blog = \Drupal\node\Entity\Node::load($blog_id);
      $title = $blog->getTitle();
      $view->setTitle('Posts in ' . $title);
    }
    else {
      $blog_id = $view->args[0];
      $blog = \Drupal\node\Entity\Node::load($blog_id);
      $title = $blog->getTitle();
      $view->setTitle('Posts in ' . $title);
    }
  }
}
