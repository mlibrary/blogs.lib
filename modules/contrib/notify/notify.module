<?php

/**
 * @file
 * Hooks for Notify module.
 *
 * The notification module allows users to subscribe to periodic e-mails which
 * include all new or revised content and/or comments much like the daily news
 * letters sent by some websites.  Even if this feature is not configured for
 * normal site users, it can be a useful feature for an administrator of a site
 * to monitor content submissions and comment posts.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\notify\NotifyInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function notify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.notify':
      $output = '<p>' . t('The <strong>Notify</strong> project allows users to subscribe to periodic e-mails which include all new or revised content and/or comments much like the daily news letters sent by some websites.  Even if this feature is not configured for normal site users, it can be a useful feature for an administrator of a site to monitor content submissions and comment posts.') . '</p>';
      $output .= '<p>' . t('The administrator sets the frequency of the e-mails in the notify administration interface. They can also set how many e-mail failures should occur before notify stops sending notifications.  Note that cron must be enabled for notifications to be sent out.') . '</p>';
      $output .= '<p>' . t('For more information please read the <a href=":url"><strong>Notify</strong></a> documentation page.', [
        ':url' => Url::fromUri('https://www.drupal.org/docs/7/modules/notify')->toString(),
      ]) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function notify_cron() {
  $config = \Drupal::config('notify.settings');
  $state = \Drupal::state();
  $notify = \Drupal::service('notify');
  $period = $config->get('notify_period');
  if ($period == NotifyInterface::PERIOD_NEVER) {
    // Never notify.
    return;
  }

  $send_last = $state->get('notify_send_last', 0);
  $cron_next = $state->get('notify_cron_next', 0);
  $doitp = $state->get('notify_users');

  if ($period >= 86400) {
    if ($doitp || ($cron_next < \Drupal::time()->getRequestTime())) {
      $doitp = TRUE;
    }
    else {
      return;
    }
  }
  $next = $notify->nextNotification($send_last);

  if (\Drupal::time()->getRequestTime() > $next || $doitp) {
    [$num_sent, $num_fail] = $notify->send();
    $num_sent += $state->get('notify_num_sent');
    $num_fail += $state->get('notify_num_failed');

    $next = $notify->nextNotification(\Drupal::time()->getRequestTime());
    $state->setMultiple([
      'notify_num_sent' => $num_sent,
      'notify_num_failed' => $num_fail,
      'notify_cron_next' => $next,
    ]);
  }
}

/**
 * Implements hook_user_cancel().
 */
function notify_user_cancel($edit, $account, $method) {
  global $user;
  \Drupal::database()->delete('notify')
    ->condition('uid', $user->uid)
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function notify_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $config = \Drupal::config('notify.settings');
  $period = $config->get('notify_period');
  if ($period > 0) {
    $form += _notify_user_reg_fields();
  }
}

/**
 * Implements hook_ENTIY_TYPE__insert().
 */
function notify_user_insert(User $account) {
  $uid = $account->id();
  $config = \Drupal::config('notify.settings');
  $id = \Drupal::database()->insert('notify')
    ->fields([
      'uid' => $uid,
      'status' => $config->get('notify_reg_default'),
      'node' => $config->get('notify_def_node'),
      'comment' => $config->get('notify_def_comment'),
    ])
    ->execute();
  // Subscribe user to node type if subscription is permitted
  // Get permitted node types.
  $nodetypes = $config->get('notify_nodetypes');
  /*
  $nodetypes = [
    'article' => TRUE,
  ];
  */

  if ($nodetypes != NULL) {
    foreach ($nodetypes as $ntype => $value) {
      if ($value) {
        \Drupal::database()->insert('notify_subscriptions')
          ->fields([
            'uid' => $uid,
            'type' => $ntype,
          ])
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function notify_mail($key, &$message, $params) {
  $host = \Drupal::request()->getSchemeAndHttpHost();
  $config = \Drupal::config('notify.settings');
  $siteconfig = \Drupal::config('system.site');
  $username = $params['user']->getDisplayName();
  $useruid = $params['user']->id();
  $sitename = $siteconfig->get('name');
  $sitemail = $siteconfig->get('mail');
  $upl = $params['user']->getPreferredLangcode();
  $messagefrom = $sitename . ' <' . $sitemail . '>';

  $message['headers']['MIME-Version'] = '1.0';
  // Need to do more to send nicely formatted text/html mail.
  // Stay at text/plain for now.
  // $message['headers']['Content-Type'] = 'text/html;charset=utf-8';.
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Errors-To'] = $message['headers']['Reply-to'] = $messagefrom;
  $message['headers']['Return-Path'] = $sitemail;
  $message['subject'] = t('New content notification for @username from @sitename', [
    '@username' => $username,
    '@sitename' => $sitename,
  ], ['langcode' => $upl]);
  $message['body'][] = Markup::create(t('Greetings @user,', ['@user' => $username], ['langcode' => $upl]) . '<br /><br />');
  $message['body'][] = Markup::create(t('this is a notification about new content from @sitename.', ['@sitename' => $sitename], ['langcode' => $upl]) . '<br />');
  $fulltext = t('Click on the links below to see the whole node/comment.', [], ['langcode' => $upl]);
  $message['body'][] = t('This e-mail only lists the titles.', [], ['langcode' => $upl]) . ' ' . $fulltext;
  $message['body'][] = Markup::create($params['content']);
  $message['body'][] = Markup::create('<br />&nbsp;<br />' . t('This is an automatic e-mail from @sitename. To stop receiving these emails, change your notification preferences at @host/user/@useruid/notify.' . '</p>',
    ['@sitename' => $sitename, '@host' => $host, '@useruid' => $useruid], ['langcode' => $upl]));
}

/**
 * Implements hook_comment_insert().
 *
 * Add tracked newly created unpublished comments to the unpublished queue.
 */
function notify_comment_insert(EntityInterface $entity) {
  if (!$entity->status->value) {
    \Drupal::database()->insert('notify_unpublished_queue')
      ->fields([
        'nid' => $entity->get('entity_id')->getValue()[0]['target_id'],
        'cid' => $entity->id(),
      ])
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 *
 * Delete any unpublished contents in the queue associated with the
 * node being deleted.
 */
function notify_node_delete($node) {
  \Drupal::database()->delete('notify_unpublished_queue')
    ->condition('nid', $node->id())
    ->execute();
}

/**
 * Implements hook_comment_delete().
 *
 * Delete the unpublished comment in the queue when the
 * comment itself is deleted.
 */
function notify_comment_delete($comment) {
  \Drupal::database()->delete('notify_unpublished_queue')
    ->condition('cid', $comment->id())
    ->execute();
}

/**
 * Returns form fields to be added to User registration form.
 */
function _notify_user_reg_fields() {
  $config = \Drupal::config('notify.settings');
  if (!\Drupal::currentUser()->hasPermission('access notify')) {
    return [];
  }

  // Get the variable for how often the notifications are sent out.
  $period = $config->get("notify_period");

  // Add a fieldset containing a checkbox for users to accept getting updates on
  // the registration form.
  $fields['notify_agree'] = [
    '#weight' => $config->get('notify_weightur'),
    '#type' => 'fieldset',
    '#title' => t('E-mail Notifications'),
  ];

  // Add the checkbox to the fieldset.
  $fields['notify_agree']['notify_decision'] = [
    '#type' => 'checkbox',
    '#title' => t('Receive e-mail notifications of new content posted to this site. Notifications are sent every @interval.',
      ['@interval' => \Drupal::service('date.formatter')->formatInterval($period)]),
    '#return_value' => 1,
    '#default_value' => $config->get('notify_reg_default'),
  ];

  return $fields;
}
