<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Block\BlockPluginInterface;
/**
 * @file
 * Module file for Passwordless.
 */

use Drupal\Component\Utility\Xss;

/**
 * Implements hook_menu_links_discovered_alter().
 */
function passwordless_menu_links_discovered_alter(&$links) {
  unset($links['user.pass']);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function passwordless_menu_local_tasks_alter(&$data, $route_name) {
  if (!empty($data['tabs'][0]['user.pass'])) {
    unset($data['tabs'][0]['user.pass']);
  }
}

/**
 * Implements hook_form_alter().
 */
function passwordless_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $mail_description = t('A valid email address. All emails from the system will be sent to this address. The email address is not made public and will only be used to send you a login link or if you wish to receive certain news or notifications by email.');

  switch ($form_id) {
    case 'user_login_form' :
      // Replace form built at Drupal\user\Plugin\Block\UserLoginBlock
      $form = \Drupal::formBuilder()->getForm('Drupal\passwordless\Form\PasswordlessLoginForm');
      unset($form['name']['#attributes']['autofocus']);
      unset($form['name']['#description']);
      $form['name']['#size'] = 15;
      $form['#action'] = Url::fromRoute(
        '<current>',
        [],
        [
          'query' => \Drupal::service('redirect.destination')->getAsArray(),
          'external' => FALSE
        ])->toString();
    break;

    case 'user_admin_settings' :
      $form['email_password_reset']['#title'] = t('Login-link request');
      $form['email_password_reset']['#description'] = t('Edit the email messages sent to users who request a login link.');
    break;

    case 'user_register_form' :
      if (!empty($form['account']['mail'])) {
        $form['account']['mail']['#description'] = $mail_description;
        $form['account']['mail']['#required'] = TRUE;
      }
      // Hides the password field, and populates it with a random password
      $form['account']['pass']['#type'] = 'value';
      $form['account']['pass']['#value'] = sha1(user_password());
    break;

    case 'user_form' :
      $form_state->set('user_pass_reset', 1);
      $form['account']['mail']['#description'] = $mail_description;
      $validate_unset = array_search('user_validate_current_pass', $form['#validate']);
      if (!empty($validate_unset)) {
        unset($form['#validate'][$validate_unset]);
      }
      unset($form['account']['pass'], $form['account']['current_pass']);
    break;
  }
}

/**
 * Implements hook_block_view_alter().
 */
function passwordless_block_view_alter(array &$build, BlockPluginInterface $block) {
  switch ($block->getPluginId()) {
    case 'user_login_block' :
      unset($build['content']['user_links']['#items']['request_password']);
    break;
  }
}

/**
 * Retrieves and returns specific variables from config.
 */
function _passwordless_text($key) {
  $config = \Drupal::config('passwordless.settings');
  $text = $config->get('passwordless_' . $key);

  if (is_array($text)) {
    extract($text);
    $format = empty($format) ? filter_default_format() : $format;
    return check_markup($value, $format);
  }
  else {
    return Xss::filter($text);
  }
}
